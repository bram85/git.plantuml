#+title: Draw git branch trees with PlantUML
#+author: Bram Schoenmakers
#+options: toc:2 tasks:nil
#+property: header-args:plantuml :file /dev/null :noweb no :tangle no :results silent :exports code

* Example

#+begin_src plantuml :file img/example.png :results replace output graphics :exports both :tangle no
  @startuml
  !include git.plantuml

  $branch(master, 5)
  $branch(feature, 3, master, 2, master, 4)
  $branch(unfinished, 2, master, 2)

  $tag(master3, v0.1)
  @enduml
#+end_src

#+RESULTS:
[[file:img/example.png]]

* Source
** Header

#+begin_src plantuml :noweb no-export :tangle git.plantuml
  ''''''''''''''''''''''''''''''''''''''''''
  ' THIS FILE IS GENERATED FROM README.ORG '
  ''''''''''''''''''''''''''''''''''''''''''

  ' Author: Bram Schoenmakers <me@bramschoenmakers.nl>
  ' License: Attribution 4.0 International (CC BY 4.0)
  '          https://creativecommons.org/licenses/by/4.0/

  @startuml
  <<style>>
  <<functions>>
  <<procedures>>
  @enduml
#+end_src

** Style

#+name: style
#+begin_src plantuml
  hide stereotype

  skinparam interface {
          backgroundColor Gold
  }

  skinparam rectangle {
          backgroundColor<<branchLabel>> Green
          fontColor<<branchLabel>> white
          backgroundColor<<tag>> Yellow
          fontSize 11
  }
#+end_src

** Functions

#+name: functions
#+begin_src plantuml
  !function $commitName($branch, $number)
  !return %string($branch + $number)
  !endfunction
#+end_src

** Procedures
#+name: procedures
#+begin_src plantuml :noweb no-export :exports none
  <<procedure-declare-commit>>
  <<procedure-branch-label>>
  <<procedure-tag>>
  <<procedure-branch>>
#+end_src

*** Commit

#+name: procedure-declare-commit
#+begin_src plantuml
    !procedure $declareCommit($name, $label="")
    !if ($label != "")
    circle $label as $name
    !else
    circle $name
    !endif
    !endprocedure

    ' $parent1 and $parent2 are supposed to be declared
    !procedure $commit($name, $parent1, $parent2="", $label="")
    $declareCommit($name, $label)

    !if ($parent1 != "")
    ($parent1) -up-> ($name)
    !endif

    !if ($parent2 != "")
    ($parent2) -up-> ($name)
    !endif

    !endprocedure

#+end_src

*** Branch label
**** Usage

#+begin_src plantuml :file img/branch-label.png :results replace output graphics :exports both :tangle no
  @startuml
  !include git.plantuml

  $declareCommit(1)
  $commit(2, 1)

  $branchLabel(2, experiment)
  @enduml
#+end_src

#+RESULTS:
[[file:img/branch-label.png]]

**** Source
#+name: procedure-branch-label
#+begin_src plantuml
  !procedure $branchLabel($commit, $name)
  rectangle "$name" <<branchLabel>>
  $commit .[norank]right. [$name] #grey
  !endprocedure
#+end_src

*** Tag

Assigns a tag label to a commit. The commit has to be added with a =$commit= or a =$declareCommit= before.

**** Usage

#+begin_src plantuml :file img/tag.png :results replace output graphics :exports both :tangle no
  @startuml
  !include git.plantuml

  $declareCommit(1)
  $commit(2, 1)

  $tag(2, "v0.1")
  @enduml
#+end_src

#+RESULTS:
[[file:img/tag.png]]

**** Source

#+name: procedure-tag
#+begin_src plantuml
  !procedure $tag($commit, $name)
  together {
          rectangle "$name" <<tag>>
          $commit .[norank,hidden]. [$name] #grey
          $commit .[norank]. [$name] #grey
          $commit .[norank,hidden]. [$name] #grey
  }
  !endprocedure
#+end_src

*** Branch

#+name: procedure-branch
#+begin_src plantuml
    !procedure $branch($name, $numCommits, $fromBranch1="", $fromCommit1="", $toBranch="", $toCommit="", $fromBranch2="", $fromCommit2="")
    rectangle {
            !$counter = $numCommits
            !while $counter != 0
            !$parentCommit = %string($name + ($counter - 1))
            !$thisCommit = %string($name + $counter)

            $declareCommit($thisCommit, $counter)
            !if ($counter > 1)
            $declareCommit($parentCommit, %string($counter - 1))
            $commit($thisCommit, $parentCommit, $label=$counter)
            !endif

            !if ($counter == $numCommits)
            !if ($toBranch != "")
            $commit($commitName($toBranch, $toCommit), $thisCommit, $label=$toCommit)
            !endif

            $branchLabel($thisCommit, $name)
            !endif

            !if ($counter == 1 && $fromBranch1 != "")
            $declareCommit($commitName($fromBranch1, $fromCommit1), $fromCommit1)


            !if ($fromBranch2 != "")
            $declareCommit($commitName($fromBranch2, $fromCommit2), $fromCommit2)
            !endif

            $commit($thisCommit, $commitName($fromBranch1, $fromCommit1), $commitName($fromBranch2, $fromCommit2), $counter)
            !endif

            !$counter = $counter - 1
            !endwhile
    }
    !endprocedure
#+end_src

* License

[[https://creativecommons.org/licenses/by/4.0/][Attribution 4.0 International (CC BY 4.0)]]
